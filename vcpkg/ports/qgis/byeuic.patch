diff --git a/CMakeLists.txt b/CMakeLists.txt
index dc86cd5281a..17690c02409 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1061,7 +1061,6 @@ if (WITH_CORE AND WITH_BINDINGS)
 
   find_package(Qsci REQUIRED)
   include(PythonMacros)
-  include(PyQtMacros)
   include(SIPMacros)
 
   set(SIP_INCLUDES ${PYQT_SIP_DIR} ${CMAKE_SOURCE_DIR}/python)
diff --git a/cmake/PyQtMacros.cmake b/cmake/PyQtMacros.cmake
index 9a2fe0df7c8..e69de29bb2d 100644
--- a/cmake/PyQtMacros.cmake
+++ b/cmake/PyQtMacros.cmake
@@ -1,98 +0,0 @@
-# Macros for PyQt
-# ~~~~~~~~~~~~~~~~
-# Copyright (c) 2009, Juergen E. Fischer <jef at norbit dot de>
-# Redistribution and use is allowed according to the terms of the BSD license.
-# For details see the accompanying COPYING-CMAKE-SCRIPTS file.
-
-IF(BUILD_WITH_QT6)
-  SET(PYUIC_PROG_NAME pyuic6)
-  SET(PYUIC_PROG_NAMES pyuic6)
-ELSE()
-  SET(PYUIC_PROG_NAME pyuic5)
-  SET(PYUIC_PROG_NAMES pyuic5)
-  SET(PYRCC_PROG_NAME pyrcc5)
-ENDIF()
-
-IF(NOT PYUIC_PROGRAM)
-  FIND_PROGRAM(PYUIC_PROGRAM NAMES ${PYUIC_PROG_NAMES} PATHS $ENV{LIB_DIR}/bin)
-  IF (NOT PYUIC_PROGRAM)
-    MESSAGE(FATAL_ERROR "pyuic5 not found - aborting")
-  ENDIF (NOT PYUIC_PROGRAM)
-ENDIF(NOT PYUIC_PROGRAM)
-
-# Adapted from QT4_WRAP_UI
-MACRO(PYQT_WRAP_UI outfiles )
-  SET(PYUIC_WRAPPER_OUTPUT_DIRECTORY "${PYTHON_OUTPUT_DIRECTORY}")
-  SET(PYUIC_WRAPPER_PYTHON_EXECUTABLE "${Python_EXECUTABLE}")
-  IF(CMAKE_HOST_WIN32)
-    IF(USING_NINJA OR USING_NMAKE)
-      SET(PYUIC_WRAPPER "${CMAKE_SOURCE_DIR}/scripts/pyuic_wrapper.bat")
-      SET(PYUIC_WRAPPER_PATH "${QGIS_OUTPUT_DIRECTORY}/bin")
-    ELSE(USING_NINJA OR USING_NMAKE)
-      SET(PYUIC_WRAPPER "${CMAKE_SOURCE_DIR}/scripts/pyuic_wrapper.bat")
-      SET(PYUIC_WRAPPER_PATH "${QGIS_OUTPUT_DIRECTORY}/bin/${CMAKE_BUILD_TYPE}")
-    ENDIF(USING_NINJA OR USING_NMAKE)
-  ELSEIF(MINGW)
-    # Clear all variables to invoke PYUIC_PROGRAM directly
-    SET(PYUIC_WRAPPER_OUTPUT_DIRECTORY "")
-    SET(PYUIC_WRAPPER_PYTHON_EXECUTABLE "")
-  ELSE()
-    # TODO osx
-    SET(PYUIC_WRAPPER "${CMAKE_SOURCE_DIR}/scripts/pyuic_wrapper.sh")
-    SET(PYUIC_WRAPPER_PATH "${QGIS_OUTPUT_DIRECTORY}/lib${LIB_SUFFIX}")
-  ENDIF()
-
-  FOREACH(it ${ARGN})
-    GET_FILENAME_COMPONENT(outfile ${it} NAME_WE)
-    GET_FILENAME_COMPONENT(infile ${it} ABSOLUTE)
-    SET(outfile ${CMAKE_CURRENT_BINARY_DIR}/ui_${outfile}.py)
-    ADD_CUSTOM_COMMAND(OUTPUT ${outfile}
-      COMMAND ${PYUIC_WRAPPER} "${PYUIC_PROGRAM}" "${PYUIC_WRAPPER_PATH}" "${PYUIC_WRAPPER_OUTPUT_DIRECTORY}" "${PYUIC_WRAPPER_PYTHON_EXECUTABLE}" ${infile} -o ${outfile}
-      MAIN_DEPENDENCY ${infile}
-      DEPENDS pygui pycore pyqtcompat
-    )
-    SET(${outfiles} ${${outfiles}} ${outfile})
-  ENDFOREACH(it)
-ENDMACRO(PYQT_WRAP_UI)
-
-IF(NOT PYRCC_PROGRAM AND NOT BUILD_WITH_QT6)
-  FIND_PROGRAM(PYRCC_PROGRAM NAMES ${PYRCC_PROG_NAME} PATHS $ENV{LIB_DIR}/bin)
-  IF (NOT PYRCC_PROGRAM)
-    MESSAGE(FATAL_ERROR "pyrcc5 not found - aborting")
-  ENDIF (NOT PYRCC_PROGRAM)
-ENDIF(NOT PYRCC_PROGRAM AND NOT BUILD_WITH_QT6)
-
-# Adapted from QT4_ADD_RESOURCES
-MACRO (PYQT_ADD_RESOURCES outfiles )
-  FOREACH (it ${ARGN})
-    GET_FILENAME_COMPONENT(outfile ${it} NAME_WE)
-    GET_FILENAME_COMPONENT(infile ${it} ABSOLUTE)
-    GET_FILENAME_COMPONENT(rc_path ${infile} PATH)
-    SET(outfile ${CMAKE_CURRENT_BINARY_DIR}/${outfile}_rc.py)
-    #  parse file for dependencies
-    #  all files are absolute paths or relative to the location of the qrc file
-    FILE(READ "${infile}" _RC_FILE_CONTENTS)
-    STRING(REGEX MATCHALL "<file[^<]+" _RC_FILES "${_RC_FILE_CONTENTS}")
-    SET(_RC_DEPENDS)
-    FOREACH(_RC_FILE ${_RC_FILES})
-      STRING(REGEX REPLACE "^<file[^>]*>" "" _RC_FILE "${_RC_FILE}")
-      STRING(REGEX MATCH "^/|([A-Za-z]:/)" _ABS_PATH_INDICATOR "${_RC_FILE}")
-      IF(NOT _ABS_PATH_INDICATOR)
-        SET(_RC_FILE "${rc_path}/${_RC_FILE}")
-      ENDIF(NOT _ABS_PATH_INDICATOR)
-      SET(_RC_DEPENDS ${_RC_DEPENDS} "${_RC_FILE}")
-    ENDFOREACH(_RC_FILE)
-    IF (BUILD_WITH_QT6)
-      ADD_CUSTOM_COMMAND(OUTPUT ${outfile}
-        COMMAND Qt6::rcc -g python -o ${outfile} ${infile}
-        MAIN_DEPENDENCY ${infile}
-        DEPENDS ${_RC_DEPENDS})
-    ELSE()
-      ADD_CUSTOM_COMMAND(OUTPUT ${outfile}
-        COMMAND ${PYRCC_PROGRAM} ${_name_opt} -o ${outfile} ${infile}
-        MAIN_DEPENDENCY ${infile}
-        DEPENDS ${_RC_DEPENDS})
-    ENDIF()
-    SET(${outfiles} ${${outfiles}} ${outfile})
-  ENDFOREACH (it)
-ENDMACRO (PYQT_ADD_RESOURCES)
diff --git a/python/console/CMakeLists.txt b/python/console/CMakeLists.txt
index 365b4b1d6d4..5cfd44bb89d 100644
--- a/python/console/CMakeLists.txt
+++ b/python/console/CMakeLists.txt
@@ -11,11 +11,13 @@ set(PY_CONSOLE_FILES
   __init__.py
 )
 
-file(GLOB UI_FILES *.ui)
-PYQT_WRAP_UI(PYUI_FILES ${UI_FILES})
-add_custom_target(pyconsole ALL DEPENDS ${PYUI_FILES})
+set(UI_FILES
+  console_compile_apis.ui
+  console_settings.ui)
 
-foreach(pyfile ${PY_CONSOLE_FILES} ${PYUI_FILES})
+add_custom_target(pyconsole ALL)
+
+foreach(pyfile ${PY_CONSOLE_FILES})
   add_custom_command(TARGET pyconsole
     POST_BUILD
     COMMAND ${CMAKE_COMMAND} -E make_directory ${PYTHON_OUTPUT_DIRECTORY}/console
@@ -26,5 +28,5 @@ foreach(pyfile ${PY_CONSOLE_FILES} ${PYUI_FILES})
 endforeach(pyfile)
 PY_COMPILE(pyconsole "${PYTHON_OUTPUT_DIRECTORY}/console")
 
-install(FILES ${PY_CONSOLE_FILES} ${PYUI_FILES} DESTINATION "${QGIS_CONSOLE_DIR}")
+install(FILES ${PY_CONSOLE_FILES} ${UI_FILES} DESTINATION "${QGIS_CONSOLE_DIR}")
 
diff --git a/python/console/console_compile_apis.py b/python/console/console_compile_apis.py
index a041166c0d1..b02239b857f 100644
--- a/python/console/console_compile_apis.py
+++ b/python/console/console_compile_apis.py
@@ -21,11 +21,14 @@ Portions of this file contain code from Eric4 APIsManager module.
 
 import os
 
+from pathlib import Path
+
+from qgis.PyQt import uic
 from qgis.PyQt.Qsci import QsciAPIs, QsciLexerPython
 from qgis.PyQt.QtWidgets import QDialog, QDialogButtonBox
 from qgis.PyQt.QtCore import QCoreApplication
 
-from .ui_console_compile_apis import Ui_APIsDialogPythonConsole
+Ui_APIsDialogPythonConsole, _ = uic.loadUiType(Path(__file__).parent / 'console_compile_apis.ui')
 
 
 class PrepareAPIDialog(QDialog):
diff --git a/python/console/console_settings.py b/python/console/console_settings.py
index 36ba6e2df40..add728834b8 100644
--- a/python/console/console_settings.py
+++ b/python/console/console_settings.py
@@ -19,6 +19,9 @@ email                : lrssvtml (at) gmail (dot) com
 Some portions of code were taken from https://code.google.com/p/pydee/
 """
 
+from pathlib import Path
+
+from qgis.PyQt import uic
 from qgis.PyQt.QtCore import QCoreApplication, QUrl
 from qgis.PyQt.QtWidgets import QWidget, QFileDialog, QMessageBox, QTableWidgetItem, QHBoxLayout
 from qgis.PyQt.QtGui import QIcon, QDesktopServices
@@ -27,7 +30,8 @@ from qgis.core import QgsSettings, QgsApplication, QgsSettingsTree
 from qgis.gui import QgsOptionsPageWidget, QgsOptionsWidgetFactory
 
 from .console_compile_apis import PrepareAPIDialog
-from .ui_console_settings import Ui_SettingsDialogPythonConsole
+
+Ui_SettingsDialogPythonConsole, _ = uic.loadUiType(Path(__file__).parent / 'console_settings.ui')
 
 
 class ConsoleOptionsFactory(QgsOptionsWidgetFactory):
diff --git a/python/plugins/db_manager/CMakeLists.txt b/python/plugins/db_manager/CMakeLists.txt
index a910ee7fc05..f430ed8ad17 100644
--- a/python/plugins/db_manager/CMakeLists.txt
+++ b/python/plugins/db_manager/CMakeLists.txt
@@ -5,8 +5,6 @@ file(GLOB OTHER_FILES LICENSE README TODO)
 file(GLOB PY_FILES *.py)
 
 file(GLOB UI_FILES ui/*.ui)
-PYQT_WRAP_UI(PYUI_FILES ${UI_FILES})
-PYQT_ADD_RESOURCES(PYRC_FILES resources.qrc)
 
-PLUGIN_INSTALL(db_manager . ${OTHER_FILES} ${PY_FILES} ${PYRC_FILES} metadata.txt)
-PLUGIN_INSTALL(db_manager ui ${PYUI_FILES} ui/__init__.py)
+PLUGIN_INSTALL(db_manager . ${OTHER_FILES} ${PY_FILES} metadata.txt)
+PLUGIN_INSTALL(db_manager ui ${UI_FILES} ui/__init__.py)
diff --git a/python/plugins/db_manager/db_manager.py b/python/plugins/db_manager/db_manager.py
index aa01e8099c7..17aa2dd5fff 100644
--- a/python/plugins/db_manager/db_manager.py
+++ b/python/plugins/db_manager/db_manager.py
@@ -43,6 +43,7 @@ from .db_tree import DBTree
 
 from .db_plugins.plugin import BaseError
 from .dlg_db_error import DlgDbError
+from .gui_utils import GuiUtils
 
 
 class DBManager(QMainWindow):
@@ -380,7 +381,7 @@ class DBManager(QMainWindow):
 
     def setupUi(self):
         self.setWindowTitle(self.tr("DB Manager"))
-        self.setWindowIcon(QIcon(":/db_manager/icon"))
+        self.setWindowIcon(GuiUtils.get_icon("dbmanager"))
         self.resize(QSize(700, 500).expandedTo(self.minimumSizeHint()))
 
         # create central tab widget and add the first 3 tabs: info, table and preview
@@ -453,7 +454,7 @@ class DBManager(QMainWindow):
 
         self.actionRefresh = self.menuDb.addAction(QgsApplication.getThemeIcon("/mActionRefresh.svg"), self.tr("&Refresh"),
                                                    self.refreshActionSlot, QKeySequence("F5"))
-        self.actionSqlWindow = self.menuDb.addAction(QIcon(":/db_manager/actions/sql_window"), self.tr("&SQL Window"),
+        self.actionSqlWindow = self.menuDb.addAction(GuiUtils.get_icon('mActionSQLWindow'), self.tr("&SQL Window"),
                                                      self.runSqlWindow, QKeySequence("F2"))
         self.menuDb.addSeparator()
         self.actionClose = self.menuDb.addAction(QIcon(), self.tr("&Exit"), self.close, QKeySequence("CTRL+Q"))
@@ -470,10 +471,10 @@ class DBManager(QMainWindow):
         sep.setObjectName("DB_Manager_TableMenu_placeholder")
         sep.setVisible(False)
 
-        self.actionImport = self.menuTable.addAction(QIcon(":/db_manager/actions/import"),
+        self.actionImport = self.menuTable.addAction(GuiUtils.get_icon("mActionDBImport"),
                                                      QApplication.translate("DBManager", "&Import Layer/File…"),
                                                      self.importActionSlot)
-        self.actionExport = self.menuTable.addAction(QIcon(":/db_manager/actions/export"),
+        self.actionExport = self.menuTable.addAction(GuiUtils.get_icon("mActionDBExport"),
                                                      QApplication.translate("DBManager", "&Export to File…"),
                                                      self.exportActionSlot)
         self.menuTable.addSeparator()
diff --git a/python/plugins/db_manager/db_manager_plugin.py b/python/plugins/db_manager/db_manager_plugin.py
index f06c12384c5..a289e4f8e90 100644
--- a/python/plugins/db_manager/db_manager_plugin.py
+++ b/python/plugins/db_manager/db_manager_plugin.py
@@ -29,8 +29,6 @@ from qgis.core import (
     QgsApplication
 )
 
-from . import resources_rc  # NOQA
-
 
 class DBManagerPlugin:
 
diff --git a/python/plugins/db_manager/db_model.py b/python/plugins/db_manager/db_model.py
index ff3526998ce..91bc728460d 100644
--- a/python/plugins/db_manager/db_model.py
+++ b/python/plugins/db_manager/db_model.py
@@ -26,6 +26,7 @@ from qgis.PyQt.QtGui import QIcon
 from .db_plugins import supportedDbTypes, createDbPlugin
 from .db_plugins.plugin import BaseError, Table, Database
 from .dlg_db_error import DlgDbError
+from .gui_utils import GuiUtils
 
 from qgis.core import (
     QgsApplication,
@@ -41,8 +42,6 @@ from qgis.core import (
 
 from qgis.utils import OverrideCursor
 
-from . import resources_rc  # NOQA
-
 try:
     from qgis.core import QgsVectorLayerExporter  # NOQA
 
@@ -156,8 +155,8 @@ class ConnectionItem(TreeItem):
 
         # load (shared) icon with first instance of table item
         if not hasattr(ConnectionItem, 'connectedIcon'):
-            ConnectionItem.connectedIcon = QIcon(":/db_manager/icons/plugged.png")
-            ConnectionItem.disconnectedIcon = QIcon(":/db_manager/icons/unplugged.png")
+            ConnectionItem.connectedIcon = GuiUtils.get_icon("plugged")
+            ConnectionItem.disconnectedIcon = GuiUtils.get_icon("unplugged")
 
     def data(self, column):
         if column == 0:
@@ -214,7 +213,7 @@ class SchemaItem(TreeItem):
 
         # load (shared) icon with first instance of schema item
         if not hasattr(SchemaItem, 'schemaIcon'):
-            SchemaItem.schemaIcon = QIcon(":/db_manager/icons/namespace.png")
+            SchemaItem.schemaIcon = GuiUtils.get_icon("namespace")
 
     def data(self, column):
         if column == 0:
@@ -246,13 +245,13 @@ class TableItem(TreeItem):
         # load (shared) icon with first instance of table item
         if not hasattr(TableItem, 'tableIcon'):
             TableItem.tableIcon = QgsApplication.getThemeIcon("/mIconTableLayer.svg")
-            TableItem.viewIcon = QIcon(":/db_manager/icons/view.png")
-            TableItem.viewMaterializedIcon = QIcon(":/db_manager/icons/view_materialized.png")
+            TableItem.viewIcon = GuiUtils.get_icon("view")
+            TableItem.viewMaterializedIcon = GuiUtils.get_icon("view_materialized")
             TableItem.layerPointIcon = QgsApplication.getThemeIcon("/mIconPointLayer.svg")
             TableItem.layerLineIcon = QgsApplication.getThemeIcon("/mIconLineLayer.svg")
             TableItem.layerPolygonIcon = QgsApplication.getThemeIcon("/mIconPolygonLayer.svg")
             TableItem.layerRasterIcon = QgsApplication.getThemeIcon("/mIconRasterLayer.svg")
-            TableItem.layerUnknownIcon = QIcon(":/db_manager/icons/layer_unknown.png")
+            TableItem.layerUnknownIcon = GuiUtils.get_icon("layer_unknown")
 
     def data(self, column):
         if column == 0:
diff --git a/python/plugins/db_manager/db_plugins/html_elems.py b/python/plugins/db_manager/db_plugins/html_elems.py
index 8e4f1b4d583..96b47f4c301 100644
--- a/python/plugins/db_manager/db_plugins/html_elems.py
+++ b/python/plugins/db_manager/db_plugins/html_elems.py
@@ -153,13 +153,6 @@ class HtmlTable(HtmlElem):
         HtmlElem.__init__(self, 'table', rows, attrs)
 
 
-class HtmlWarning(HtmlContent):
-
-    def __init__(self, data):
-        data = ['<img src=":/icons/warning-20px.png">&nbsp;&nbsp; ', data]
-        HtmlContent.__init__(self, data)
-
-
 class HtmlSection(HtmlContent):
 
     def __init__(self, title, content=None):
diff --git a/python/plugins/db_manager/db_plugins/info_model.py b/python/plugins/db_manager/db_plugins/info_model.py
index 0dac39e3a24..c27d77b521b 100644
--- a/python/plugins/db_manager/db_plugins/info_model.py
+++ b/python/plugins/db_manager/db_plugins/info_model.py
@@ -77,7 +77,7 @@ class DatabaseInfo:
 
     def toHtml(self):
         if self.db is None:
-            return HtmlSection(QApplication.translate("DBManagerPlugin", 'Not connected')).toHtml()
+            return HtmlSection(QApplication.translate("DBManagerPlugin", '<warning> Not connected')).toHtml()
 
         ret = []
 
diff --git a/python/plugins/db_manager/db_plugins/postgis/plugins/versioning/CMakeLists.txt b/python/plugins/db_manager/db_plugins/postgis/plugins/versioning/CMakeLists.txt
index 5008de62c76..eeecf9c2514 100644
--- a/python/plugins/db_manager/db_plugins/postgis/plugins/versioning/CMakeLists.txt
+++ b/python/plugins/db_manager/db_plugins/postgis/plugins/versioning/CMakeLists.txt
@@ -1,4 +1,3 @@
 file(GLOB PY_FILES *.py)
 file(GLOB UI_FILES *.ui)
-PYQT_WRAP_UI(PYUI_FILES ${UI_FILES})
-PLUGIN_INSTALL(db_manager db_plugins/postgis/plugins/versioning ${PY_FILES} ${PYUI_FILES})
+PLUGIN_INSTALL(db_manager db_plugins/postgis/plugins/versioning ${PY_FILES} ${UI_FILES})
diff --git a/python/plugins/db_manager/db_plugins/postgis/plugins/versioning/dlg_versioning.py b/python/plugins/db_manager/db_plugins/postgis/plugins/versioning/dlg_versioning.py
index d4631feb67e..43ed471d2b8 100644
--- a/python/plugins/db_manager/db_plugins/postgis/plugins/versioning/dlg_versioning.py
+++ b/python/plugins/db_manager/db_plugins/postgis/plugins/versioning/dlg_versioning.py
@@ -19,14 +19,17 @@ Based on PG_Manager by Martin Dobias <wonder.sk@gmail.com> (GPLv2 license)
  ***************************************************************************/
 """
 
+from pathlib import Path
+
+from qgis.PyQt import uic
 from qgis.PyQt.QtCore import Qt
 from qgis.PyQt.QtWidgets import QDialog, QDialogButtonBox, QMessageBox, QApplication
 
-from .ui_DlgVersioning import Ui_DlgVersioning
-
 from .....dlg_db_error import DlgDbError
 from ....plugin import BaseError, Table
 
+Ui_DlgVersioning, _ = uic.loadUiType(Path(__file__).parent / 'DlgVersioining.ui')
+
 
 class DlgVersioning(QDialog, Ui_DlgVersioning):
 
diff --git a/python/plugins/db_manager/dlg_add_geometry_column.py b/python/plugins/db_manager/dlg_add_geometry_column.py
index 4ce605456bd..01aedd63477 100644
--- a/python/plugins/db_manager/dlg_add_geometry_column.py
+++ b/python/plugins/db_manager/dlg_add_geometry_column.py
@@ -20,14 +20,16 @@ The content of this file is based on
  ***************************************************************************/
 """
 
+from qgis.PyQt import uic
 from qgis.PyQt.QtCore import Qt
 from qgis.PyQt.QtWidgets import QDialog, QMessageBox, QApplication
 from qgis.utils import OverrideCursor
 
 from .db_plugins.plugin import DbError
 from .dlg_db_error import DlgDbError
+from .gui_utils import GuiUtils
 
-from .ui.ui_DlgAddGeometryColumn import Ui_DbManagerDlgAddGeometryColumn as Ui_Dialog
+Ui_Dialog, _ = uic.loadUiType(GuiUtils.get_ui_file_path('DlgAddGeometryColumn.ui'))
 
 
 class DlgAddGeometryColumn(QDialog, Ui_Dialog):
diff --git a/python/plugins/db_manager/dlg_create_constraint.py b/python/plugins/db_manager/dlg_create_constraint.py
index 855d9aa21b6..f5c70a26e3a 100644
--- a/python/plugins/db_manager/dlg_create_constraint.py
+++ b/python/plugins/db_manager/dlg_create_constraint.py
@@ -20,6 +20,7 @@ The content of this file is based on
  ***************************************************************************/
 """
 
+from qgis.PyQt import uic
 from qgis.PyQt.QtCore import Qt
 from qgis.PyQt.QtWidgets import QDialog, QApplication
 from qgis.utils import OverrideCursor
@@ -27,8 +28,9 @@ from qgis.utils import OverrideCursor
 from .db_plugins.plugin import DbError
 from .dlg_db_error import DlgDbError
 from .db_plugins.plugin import TableConstraint
+from .gui_utils import GuiUtils
 
-from .ui.ui_DlgCreateConstraint import Ui_DbManagerDlgCreateConstraint as Ui_Dialog
+Ui_Dialog, _ = uic.loadUiType(GuiUtils.get_ui_file_path('DlgCreateConstraint.ui'))
 
 
 class DlgCreateConstraint(QDialog, Ui_Dialog):
diff --git a/python/plugins/db_manager/dlg_create_index.py b/python/plugins/db_manager/dlg_create_index.py
index 6e5a291ba0f..6b14957152f 100644
--- a/python/plugins/db_manager/dlg_create_index.py
+++ b/python/plugins/db_manager/dlg_create_index.py
@@ -20,6 +20,7 @@ The content of this file is based on
  ***************************************************************************/
 """
 
+from qgis.PyQt import uic
 from qgis.PyQt.QtCore import Qt
 from qgis.PyQt.QtWidgets import QDialog, QMessageBox, QApplication
 from qgis.utils import OverrideCursor
@@ -27,8 +28,9 @@ from qgis.utils import OverrideCursor
 from .db_plugins.plugin import DbError
 from .dlg_db_error import DlgDbError
 from .db_plugins.plugin import TableIndex
+from .gui_utils import GuiUtils
 
-from .ui.ui_DlgCreateIndex import Ui_DbManagerDlgCreateIndex as Ui_Dialog
+Ui_Dialog, _ = uic.loadUiType(GuiUtils.get_ui_file_path('DlgCreateIndex.ui'))
 
 
 class DlgCreateIndex(QDialog, Ui_Dialog):
diff --git a/python/plugins/db_manager/dlg_create_table.py b/python/plugins/db_manager/dlg_create_table.py
index fa20c364313..0bab4777560 100644
--- a/python/plugins/db_manager/dlg_create_table.py
+++ b/python/plugins/db_manager/dlg_create_table.py
@@ -20,6 +20,7 @@ The content of this file is based on
  ***************************************************************************/
 """
 
+from qgis.PyQt import uic
 from qgis.PyQt.QtCore import Qt, QModelIndex
 from qgis.PyQt.QtWidgets import QItemDelegate, QComboBox, QDialog, QPushButton, QDialogButtonBox, QMessageBox, QApplication
 from qgis.PyQt.QtCore import QItemSelectionModel, pyqtSignal
@@ -29,8 +30,9 @@ from qgis.utils import OverrideCursor
 from .db_plugins.data_model import TableFieldsModel
 from .db_plugins.plugin import DbError, ConnectionError
 from .dlg_db_error import DlgDbError
+from .gui_utils import GuiUtils
 
-from .ui.ui_DlgCreateTable import Ui_DbManagerDlgCreateTable as Ui_Dialog
+Ui_Dialog, _ = uic.loadUiType(GuiUtils.get_ui_file_path('DlgCreateTable.ui'))
 
 
 class TableFieldsDelegate(QItemDelegate):
diff --git a/python/plugins/db_manager/dlg_db_error.py b/python/plugins/db_manager/dlg_db_error.py
index 3c444d0dded..cfd8a0f9f45 100644
--- a/python/plugins/db_manager/dlg_db_error.py
+++ b/python/plugins/db_manager/dlg_db_error.py
@@ -20,11 +20,14 @@ The content of this file is based on
  ***************************************************************************/
 """
 
+from qgis.PyQt import uic
 from qgis.PyQt.QtWidgets import QDialog
 
-from .ui.ui_DlgDbError import Ui_DbManagerDlgDbError as Ui_Dialog
+from .gui_utils import GuiUtils
 from .db_plugins.plugin import DbError
 
+Ui_Dialog, _ = uic.loadUiType(GuiUtils.get_ui_file_path('DlgDbError.ui'))
+
 
 class DlgDbError(QDialog, Ui_Dialog):
 
diff --git a/python/plugins/db_manager/dlg_export_vector.py b/python/plugins/db_manager/dlg_export_vector.py
index 702718205de..9533ca0918b 100644
--- a/python/plugins/db_manager/dlg_export_vector.py
+++ b/python/plugins/db_manager/dlg_export_vector.py
@@ -20,6 +20,7 @@ The content of this file is based on
  ***************************************************************************/
 """
 
+from qgis.PyQt import uic
 from qgis.PyQt.QtCore import Qt, QFileInfo
 from qgis.PyQt.QtWidgets import QDialog, QFileDialog, QMessageBox, QApplication
 from qgis.PyQt.QtGui import QCursor
@@ -31,7 +32,9 @@ from qgis.core import (QgsVectorFileWriter,
                        QgsSettings)
 from qgis.utils import OverrideCursor
 
-from .ui.ui_DlgExportVector import Ui_DbManagerDlgExportVector as Ui_Dialog
+from .gui_utils import GuiUtils
+
+Ui_Dialog, _ = uic.loadUiType(GuiUtils.get_ui_file_path('DlgExportVector.ui'))
 
 
 class DlgExportVector(QDialog, Ui_Dialog):
diff --git a/python/plugins/db_manager/dlg_field_properties.py b/python/plugins/db_manager/dlg_field_properties.py
index c751eba5b8e..c4fb29b5c35 100644
--- a/python/plugins/db_manager/dlg_field_properties.py
+++ b/python/plugins/db_manager/dlg_field_properties.py
@@ -19,10 +19,13 @@ __author__ = 'Giuseppe Sucameli'
 __date__ = 'April 2012'
 __copyright__ = '(C) 2012, Giuseppe Sucameli'
 
+from qgis.PyQt import uic
 from qgis.PyQt.QtWidgets import QDialog, QMessageBox
 
 from .db_plugins.plugin import TableField
-from .ui.ui_DlgFieldProperties import Ui_DbManagerDlgFieldProperties as Ui_Dialog
+from .gui_utils import GuiUtils
+
+Ui_Dialog, _ = uic.loadUiType(GuiUtils.get_ui_file_path('DlgFieldProperties.ui'))
 
 
 class DlgFieldProperties(QDialog, Ui_Dialog):
diff --git a/python/plugins/db_manager/dlg_import_vector.py b/python/plugins/db_manager/dlg_import_vector.py
index 880a2180474..783415e36df 100644
--- a/python/plugins/db_manager/dlg_import_vector.py
+++ b/python/plugins/db_manager/dlg_import_vector.py
@@ -20,6 +20,7 @@ The content of this file is based on
  ***************************************************************************/
 """
 
+from qgis.PyQt import uic
 from qgis.PyQt.QtCore import Qt, QFileInfo
 from qgis.PyQt.QtWidgets import QDialog, QFileDialog, QMessageBox
 
@@ -35,7 +36,9 @@ from qgis.core import (QgsDataSourceUri,
 from qgis.gui import QgsMessageViewer
 from qgis.utils import OverrideCursor
 
-from .ui.ui_DlgImportVector import Ui_DbManagerDlgImportVector as Ui_Dialog
+from .gui_utils import GuiUtils
+
+Ui_Dialog, _ = uic.loadUiType(GuiUtils.get_ui_file_path('DlgImportVector.ui'))
 
 
 class DlgImportVector(QDialog, Ui_Dialog):
diff --git a/python/plugins/db_manager/dlg_query_builder.py b/python/plugins/db_manager/dlg_query_builder.py
index f9f4fea86be..70aa3afeb2b 100644
--- a/python/plugins/db_manager/dlg_query_builder.py
+++ b/python/plugins/db_manager/dlg_query_builder.py
@@ -19,11 +19,14 @@ email                : hugo dot mercier at oslandia dot com
 Query builder dialog, based on the QSpatialite plugin (GPLv2+) by Romain Riviere
 """
 
+from qgis.PyQt import uic
 from qgis.PyQt.QtCore import Qt, QObject, QEvent
 from qgis.PyQt.QtWidgets import QDialog, QMessageBox, QTextEdit
 
-from .ui.ui_DlgQueryBuilder import Ui_DbManagerQueryBuilderDlg as Ui_Dialog
 from .db_plugins.plugin import VectorTable
+from .gui_utils import GuiUtils
+
+Ui_Dialog, _ = uic.loadUiType(GuiUtils.get_ui_file_path('DlgQueryBuilder.ui'))
 
 
 class FocusEventFilter(QObject):
diff --git a/python/plugins/db_manager/dlg_sql_layer_window.py b/python/plugins/db_manager/dlg_sql_layer_window.py
index e2846c71908..f99e14571b0 100644
--- a/python/plugins/db_manager/dlg_sql_layer_window.py
+++ b/python/plugins/db_manager/dlg_sql_layer_window.py
@@ -21,6 +21,7 @@ The content of this file is based on
 """
 from hashlib import md5
 
+from qgis.PyQt import uic
 from qgis.PyQt.QtCore import Qt, pyqtSignal
 from qgis.PyQt.QtWidgets import (QDialog,
                                  QWidget,
@@ -52,6 +53,7 @@ from .db_plugins.plugin import BaseError
 from .db_plugins.postgis.plugin import PGDatabase
 from .dlg_db_error import DlgDbError
 from .dlg_query_builder import QueryBuilderDlg
+from .gui_utils import GuiUtils
 
 try:
     from qgis.gui import QgsCodeEditorSQL  # NOQA
@@ -61,7 +63,7 @@ except:
 
     gui.QgsCodeEditorSQL = SqlEdit
 
-from .ui.ui_DlgSqlLayerWindow import Ui_DbManagerDlgSqlLayerWindow as Ui_Dialog
+Ui_Dialog, _ = uic.loadUiType(GuiUtils.get_ui_file_path('DlgSqlLayerWindow.ui'))
 
 import re
 
@@ -155,7 +157,7 @@ class DlgSqlLayerWindow(QWidget, Ui_Dialog):
         self.getColumnsBtn.clicked.connect(self.fillColumnCombos)
 
         self.queryBuilderFirst = True
-        self.queryBuilderBtn.setIcon(QIcon(":/db_manager/icons/sql.gif"))
+        self.queryBuilderBtn.setIcon(GuiUtils.get_icon("sql"))
         self.queryBuilderBtn.clicked.connect(self.displayQueryBuilder)
 
         self.presetName.textChanged.connect(self.nameChanged)
diff --git a/python/plugins/db_manager/dlg_sql_window.py b/python/plugins/db_manager/dlg_sql_window.py
index 7f80158b74e..3a4e93d506d 100644
--- a/python/plugins/db_manager/dlg_sql_window.py
+++ b/python/plugins/db_manager/dlg_sql_window.py
@@ -23,6 +23,7 @@ from hashlib import md5
 
 import os
 
+from qgis.PyQt import uic
 from qgis.PyQt.QtCore import Qt, pyqtSignal, QDir, QCoreApplication
 from qgis.PyQt.QtWidgets import (QDialog,
                                  QWidget,
@@ -56,6 +57,7 @@ from .db_plugins.plugin import BaseError
 from .db_plugins.postgis.plugin import PGDatabase
 from .dlg_db_error import DlgDbError
 from .dlg_query_builder import QueryBuilderDlg
+from .gui_utils import GuiUtils
 
 try:
     from qgis.gui import QgsCodeEditorSQL  # NOQA
@@ -65,7 +67,8 @@ except:
 
     gui.QgsCodeEditorSQL = SqlEdit
 
-from .ui.ui_DlgSqlWindow import Ui_DbManagerDlgSqlWindow as Ui_Dialog
+Ui_Dialog, _ = uic.loadUiType(GuiUtils.get_ui_file_path('DlgSqlWindow.ui'))
+
 
 import re
 
@@ -205,7 +208,7 @@ class DlgSqlWindow(QWidget, Ui_Dialog):
             self.btnCreateView.clicked.connect(self.createView)
 
         self.queryBuilderFirst = True
-        self.queryBuilderBtn.setIcon(QIcon(":/db_manager/icons/sql.gif"))
+        self.queryBuilderBtn.setIcon(GuiUtils.get_icon("sql"))
         self.queryBuilderBtn.clicked.connect(self.displayQueryBuilder)
 
         self.presetName.textChanged.connect(self.nameChanged)
diff --git a/python/plugins/db_manager/dlg_table_properties.py b/python/plugins/db_manager/dlg_table_properties.py
index f1c6b9c04b1..940f9cf97a8 100644
--- a/python/plugins/db_manager/dlg_table_properties.py
+++ b/python/plugins/db_manager/dlg_table_properties.py
@@ -20,6 +20,7 @@ The content of this file is based on
  ***************************************************************************/
 """
 
+from qgis.PyQt import uic
 from qgis.PyQt.QtCore import Qt, pyqtSignal
 from qgis.PyQt.QtWidgets import QDialog, QMessageBox, QApplication
 
@@ -33,8 +34,10 @@ from .dlg_field_properties import DlgFieldProperties
 from .dlg_add_geometry_column import DlgAddGeometryColumn
 from .dlg_create_constraint import DlgCreateConstraint
 from .dlg_create_index import DlgCreateIndex
+from .gui_utils import GuiUtils
 
-from .ui.ui_DlgTableProperties import Ui_DbManagerDlgTableProperties as Ui_Dialog
+
+Ui_Dialog, _ = uic.loadUiType(GuiUtils.get_ui_file_path('DlgTableProperties.ui'))
 
 
 class DlgTableProperties(QDialog, Ui_Dialog):
diff --git a/python/plugins/db_manager/gui_utils.py b/python/plugins/db_manager/gui_utils.py
new file mode 100644
index 00000000000..2d999453856
--- /dev/null
+++ b/python/plugins/db_manager/gui_utils.py
@@ -0,0 +1,117 @@
+# /***************************************************************************
+#  *                                                                         *
+#  *   This program is free software; you can redistribute it and/or modify  *
+#  *   it under the terms of the GNU General Public License as published by  *
+#  *   the Free Software Foundation; either version 2 of the License, or     *
+#  *   (at your option) any later version.                                   *
+#  *                                                                         *
+#  ***************************************************************************/
+
+"""
+GUI Utilities
+"""
+
+import os
+from typing import Optional, Dict
+
+from qgis.PyQt.QtGui import (
+    QIcon,
+    QImage,
+    QPixmap
+)
+
+
+class GuiUtils:
+    """
+    Utilities for GUI plugin components
+    """
+
+    ICON_CACHE: Dict[str, QIcon] = {}
+
+    @staticmethod
+    def get_icon(icon: str) -> QIcon:
+        """
+        Returns a plugin icon
+        :param icon: icon name (base part of file name)
+        :return: QIcon
+        """
+        if icon in GuiUtils.ICON_CACHE:
+            return GuiUtils.ICON_CACHE[icon]
+
+        # prefer SVG files if present
+        path = GuiUtils.get_icon_svg(icon)
+        if path:
+            res = QIcon(path)
+            GuiUtils.ICON_CACHE[icon] = res
+            return res
+
+        pixmap = GuiUtils.get_icon_as_pixmap(icon)
+        if pixmap is not None:
+            res = QIcon(pixmap)
+            GuiUtils.ICON_CACHE[icon] = res
+            return res
+
+        # return an invalid icon
+        GuiUtils.ICON_CACHE[icon] = QIcon()
+        return QIcon()
+
+    @staticmethod
+    def get_icon_svg(icon: str) -> str:
+        """
+        Returns a plugin icon's SVG file path
+        :param icon: icon name (base part of file name)
+        :return: icon svg path
+        """
+        path = os.path.join(
+            os.path.dirname(__file__),
+            'icons',
+            icon + '.svg')
+        if not os.path.exists(path):
+            return ''
+
+        return path
+
+    @staticmethod
+    def get_pixmap_path(icon: str) -> Optional[str]:
+        """
+        Returns the path to a pixmap icon
+        """
+        for suffix in ('.png', '.gif', '.xpm'):
+            path = os.path.join(
+                os.path.dirname(__file__),
+                'icons',
+                icon + suffix)
+            if os.path.exists(path):
+                return path
+
+        return None
+
+    @staticmethod
+    def get_icon_as_pixmap(icon: str) -> Optional[QPixmap]:
+        """
+        Returns a plugin icon's PNG file path
+        :param icon: icon name (png file name)
+        :return: icon png path
+        """
+        path = GuiUtils.get_pixmap_path(icon)
+        if path is not None:
+            im = QImage(path)
+            return QPixmap.fromImage(im)
+
+        return None
+
+    @staticmethod
+    def get_ui_file_path(file: str) -> str:
+        """
+        Returns a UI file's path
+        :param file: file name (uifile name)
+        :return: ui file path
+        """
+        path = os.path.join(
+            os.path.dirname(__file__),
+            'ui',
+            file)
+        if not os.path.exists(path):
+            return ''
+
+        return path
diff --git a/python/plugins/db_manager/icons/CMakeLists.txt b/python/plugins/db_manager/icons/CMakeLists.txt
index cd201354620..e19dfa82396 100644
--- a/python/plugins/db_manager/icons/CMakeLists.txt
+++ b/python/plugins/db_manager/icons/CMakeLists.txt
@@ -1,3 +1,3 @@
-file(GLOB ICON_FILES *.gif *.png *svg *.xpm toolbar/*.png)
+file(GLOB ICON_FILES *.gif *.png *.svg *.xpm)
 
 PLUGIN_INSTALL(db_manager icons ${ICON_FILES})
diff --git a/python/plugins/db_manager/info_viewer.py b/python/plugins/db_manager/info_viewer.py
index b45fdfe0235..ec3228dced8 100644
--- a/python/plugins/db_manager/info_viewer.py
+++ b/python/plugins/db_manager/info_viewer.py
@@ -24,6 +24,7 @@ from qgis.utils import OverrideCursor
 
 from .db_plugins.plugin import BaseError, DbError, DBPlugin, Schema, Table
 from .dlg_db_error import DlgDbError
+from .gui_utils import GuiUtils
 
 
 class InfoViewer(QTextBrowser):
@@ -135,8 +136,9 @@ class InfoViewer(QTextBrowser):
         return True
 
     def setHtml(self, html):
-        # convert special tags :)
-        html = str(html).replace('<warning>', '<img src=":/db_manager/warning">&nbsp;&nbsp; ')
+        # convert special tags
+        warning_icon_path = GuiUtils.get_pixmap_path('warning-20px')
+        html = str(html).replace('<warning>', f'<img src="{warning_icon_path}">&nbsp;&nbsp; ')
 
         # add default style
         html = """
diff --git a/python/plugins/db_manager/resources.qrc b/python/plugins/db_manager/resources.qrc
index 8c101a8eb03..e69de29bb2d 100644
--- a/python/plugins/db_manager/resources.qrc
+++ b/python/plugins/db_manager/resources.qrc
@@ -1,23 +0,0 @@
-<RCC>
-  <qresource prefix="/db_manager">
-    <file>icons/sql.gif</file>
-    <file>icons/layer_unknown.png</file>
-    <file>icons/namespace.png</file>
-    <file>icons/namespaces.xpm</file>
-    <file>icons/tables.xpm</file>
-    <file>icons/user.xpm</file>
-    <file>icons/users.xpm</file>
-    <file>icons/view.png</file>
-    <file>icons/view_materialized.png</file>
-    <file alias="warning">icons/warning-20px.png</file>
-    <file>icons/plugged.png</file>
-    <file>icons/unplugged.png</file>
-    <file>icons/about.png</file>
-    <file alias="icon">icons/dbmanager.svg</file> 
-  </qresource>
-  <qresource prefix="/db_manager/actions">
-    <file alias="export">icons/toolbar/mActionDBExport.svg</file>
-    <file alias="import">icons/toolbar/mActionDBImport.svg</file>
-    <file alias="sql_window">icons/toolbar/mActionSQLWindow.svg</file>
-  </qresource>
-</RCC>
diff --git a/python/pyplugin_installer/CMakeLists.txt b/python/pyplugin_installer/CMakeLists.txt
index 2dafd1b4c5b..e12b77959dc 100644
--- a/python/pyplugin_installer/CMakeLists.txt
+++ b/python/pyplugin_installer/CMakeLists.txt
@@ -14,10 +14,7 @@ set(PY_PLUGININSTALLER_FILES
     version_compare.py
 )
 
-# file(GLOB UI_FILES *.ui)
-# PYQT_WRAP_UI(PYUI_FILES ${UI_FILES})
-
-PYQT_WRAP_UI(PYUI_FILES
+set(UI_FILES
     qgsplugininstallerfetchingbase.ui
     qgsplugininstallerinstallingbase.ui
     qgsplugininstallerpluginerrorbase.ui
@@ -25,7 +22,7 @@ PYQT_WRAP_UI(PYUI_FILES
     qgsplugindependenciesdialogbase.ui
 )
 
-add_custom_target(pyplugin-installer ALL DEPENDS ${PYUI_FILES})
+add_custom_target(pyplugin-installer ALL)
 
 add_custom_command(TARGET pyplugin-installer
   POST_BUILD
@@ -33,7 +30,7 @@ add_custom_command(TARGET pyplugin-installer
   WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
 )
 
-foreach(pyfile ${PY_PLUGININSTALLER_FILES} ${PYUI_FILES})
+foreach(pyfile ${PY_PLUGININSTALLER_FILES})
   add_custom_command(TARGET pyplugin-installer
     POST_BUILD
     COMMAND ${CMAKE_COMMAND} -E copy ${pyfile} ${PYTHON_OUTPUT_DIRECTORY}/pyplugin_installer
@@ -43,4 +40,4 @@ foreach(pyfile ${PY_PLUGININSTALLER_FILES} ${PYUI_FILES})
 endforeach(pyfile)
 PY_COMPILE(pyplugin-installer "${PYTHON_OUTPUT_DIRECTORY}/pyplugin_installer")
 
-install(FILES ${PY_PLUGININSTALLER_FILES} ${PYUI_FILES} DESTINATION "${QGIS_PLUGININSTALLER_DIR}")
+install(FILES ${PY_PLUGININSTALLER_FILES} ${UI_FILES} DESTINATION "${QGIS_PLUGININSTALLER_DIR}")
diff --git a/python/pyplugin_installer/qgsplugindependenciesdialog.py b/python/pyplugin_installer/qgsplugindependenciesdialog.py
index fc5fa75ef20..7c0e6b31e39 100644
--- a/python/pyplugin_installer/qgsplugindependenciesdialog.py
+++ b/python/pyplugin_installer/qgsplugindependenciesdialog.py
@@ -12,13 +12,16 @@ __author__ = 'elpaso@itopen.it'
 __date__ = '2018-09-19'
 __copyright__ = 'Copyright 2018, GISCE-TI S.L.'
 
-
 import os
 
+from pathlib import Path
+
+from qgis.PyQt import uic
 from qgis.PyQt import QtWidgets, QtCore
-from .ui_qgsplugindependenciesdialogbase import Ui_QgsPluginDependenciesDialogBase
 from qgis.utils import iface
 
+, _ = uic.loadUiType(Path(__file__).parent / 'qgsplugindependenciesdialogbase.ui')
+
 
 class QgsPluginDependenciesDialog(QtWidgets.QDialog, Ui_QgsPluginDependenciesDialogBase):
     """A dialog that shows plugin dependencies and offers a way to install or upgrade the
diff --git a/python/pyplugin_installer/qgsplugininstallerfetchingdialog.py b/python/pyplugin_installer/qgsplugininstallerfetchingdialog.py
index d2da4165e07..7498bff9dd3 100644
--- a/python/pyplugin_installer/qgsplugininstallerfetchingdialog.py
+++ b/python/pyplugin_installer/qgsplugininstallerfetchingdialog.py
@@ -24,13 +24,16 @@
  ***************************************************************************/
 """
 
+from pathlib import Path
+
+from qgis.PyQt import uic
 from qgis.PyQt.QtCore import Qt, QCoreApplication
 from qgis.PyQt.QtWidgets import QDialog, QTreeWidgetItem
 
-from .ui_qgsplugininstallerfetchingbase import Ui_QgsPluginInstallerFetchingDialogBase
 from .installer_data import repositories
 
 from qgis.gui import QgsGui
+Ui_QgsPluginInstallerFetchingDialogBase, _ = uic.loadUiType(Path(__file__).parent / 'qgsplugininstallerfetchingbase.ui')
 
 
 class QgsPluginInstallerFetchingDialog(QDialog, Ui_QgsPluginInstallerFetchingDialogBase):
diff --git a/python/pyplugin_installer/qgsplugininstallerinstallingdialog.py b/python/pyplugin_installer/qgsplugininstallerinstallingdialog.py
index 1b4dc7552b4..5832e91527c 100644
--- a/python/pyplugin_installer/qgsplugininstallerinstallingdialog.py
+++ b/python/pyplugin_installer/qgsplugininstallerinstallingdialog.py
@@ -25,6 +25,9 @@
 """
 from builtins import str
 
+from pathlib import Path
+
+from qgis.PyQt import uic
 from qgis.PyQt.QtCore import QDir, QUrl, QFile, QCoreApplication
 from qgis.PyQt.QtWidgets import QDialog
 from qgis.PyQt.QtNetwork import QNetworkRequest, QNetworkReply
@@ -32,10 +35,11 @@ from qgis.PyQt.QtNetwork import QNetworkRequest, QNetworkReply
 import qgis
 from qgis.core import QgsNetworkAccessManager, QgsApplication, QgsNetworkRequestParameters
 
-from .ui_qgsplugininstallerinstallingbase import Ui_QgsPluginInstallerInstallingDialogBase
 from .installer_data import removeDir, repositories
 from .unzip import unzip
 
+Ui_QgsPluginInstallerInstallingDialogBase, _ = uic.loadUiType(Path(__file__).parent / 'qgsplugininstallerinstallingbase.ui')
+
 
 class QgsPluginInstallerInstallingDialog(QDialog, Ui_QgsPluginInstallerInstallingDialogBase):
     # ----------------------------------------- #
diff --git a/python/pyplugin_installer/qgsplugininstallerpluginerrordialog.py b/python/pyplugin_installer/qgsplugininstallerpluginerrordialog.py
index 011d9c3442f..76f635969ba 100644
--- a/python/pyplugin_installer/qgsplugininstallerpluginerrordialog.py
+++ b/python/pyplugin_installer/qgsplugininstallerpluginerrordialog.py
@@ -26,7 +26,11 @@
 
 from qgis.PyQt.QtWidgets import QDialog
 
-from .ui_qgsplugininstallerpluginerrorbase import Ui_QgsPluginInstallerPluginErrorDialogBase
+from pathlib import Path
+
+from qgis.PyQt import uic
+
+Ui_QgsPluginInstallerPluginErrorDialogBase, _ = uic.loadUiType(Path(__file__).parent / 'qgsplugininstallerpluginerrorbase.ui')
 
 
 class QgsPluginInstallerPluginErrorDialog(QDialog, Ui_QgsPluginInstallerPluginErrorDialogBase):
diff --git a/python/pyplugin_installer/qgsplugininstallerrepositorydialog.py b/python/pyplugin_installer/qgsplugininstallerrepositorydialog.py
index b7301833bca..9fe95c284cd 100644
--- a/python/pyplugin_installer/qgsplugininstallerrepositorydialog.py
+++ b/python/pyplugin_installer/qgsplugininstallerrepositorydialog.py
@@ -24,11 +24,14 @@
  ***************************************************************************/
 """
 
+from pathlib import Path
+
+from qgis.PyQt import uic
 from qgis.gui import QgsAuthConfigSelect
 from qgis.PyQt.QtWidgets import QDialog, QDialogButtonBox, QVBoxLayout
 from qgis.PyQt.QtCore import Qt
 
-from .ui_qgsplugininstallerrepositorybase import Ui_QgsPluginInstallerRepositoryDetailsDialogBase
+Ui_QgsPluginInstallerRepositoryDetailsDialogBase, _ = uic.loadUiType(Path(__file__).parent / 'qgsplugininstallerrepositorybase.ui')
 
 
 class QgsPluginInstallerRepositoryDialog(QDialog, Ui_QgsPluginInstallerRepositoryDetailsDialogBase):
